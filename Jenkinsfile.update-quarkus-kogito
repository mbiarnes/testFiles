@Library('jenkins-pipeline-shared-libraries')_

import org.jenkinsci.plugins.workflow.libs.Library
import org.kie.jenkins.MavenCommand

AGENT_LABEL="kie-rhel7 && kie-mem8g && !master"
MVN_TOOL="kie-maven-3.8.1"
JDK_TOOL="kie-jdk11"
kogitoPipelinesRepo="kogito-pipelines"
quarkusPlatformRepo="quarkus-platform"
baseBranch='main'
GIT_AUTHOR=
PROJECT="${params.PROJECT}"
VERSION="${params.VERSION}"
COMMAND="${params.COMMAND}"

pipeline {

    agent {
        label "$AGENT_LABEL"
    }

    options{
        timestamps()
    }

    tools {
        maven "$MVN_TOOL"
        jdk "$JDK_TOOL"
    }

    stages{
        stage('CleanWorkspace') {
            steps {
                cleanWs()
            }
        }
		stage('clone kogito-pipelines') {
			steps{
				script{
                    dir(kogitoPipelinesRepo){
                        checkoutRepo(kogitoPipelinesRepo, $baseBranch)
                    }
				}
			}
		}
        stage('clone quarkus-platform and update kogito version: stage') {
			when {
				expression {COMMAND	== 'stage'}
			}
            steps {
                script {
                    String prLink = null
                    String commitMsg = "bump up ${PROJECT} to ${VERSION}"
                    String localBranch = "bump-${PROJECT}-${VERSION}"
                    dir(quarkusPlatformRepo){
                        checkoutRepo(quarkusPlatformRepo, $baseBranch)
                        githubscm.setUserConfigFromCreds()
                        githubscm.createBranch(localBranch)
                        // run update-quarkus-platform.sh with 'tage' to update kogito version in quarkus-platform
                        sh "../${kogitoPipelinesRepo}/tools/update-quarkus-platform.sh ${PROJECT} ${VERSION} ${COMMAND}"
                        // Add changed files, commit and open PR
                        prLink = commitAndCreatePR(commitMsg, { sh "git add --all" }, localBranch, $baseBranch)
                    }
                }
            }
        }
        // user interaction required: finalize or abort
        stage('Approval (ATTENTION: Select Finalize to continue)') {
			when {
				expression {COMMAND	== 'stage'}
			}
            steps {
                input message: 'Do you want to finalize this job?', ok: 'Finalize'
            }
        }
        stage('update kogito version: finalize)') {
			when {
				expression {COMMAND	== 'stage'}
			}
            steps {
                script {
                    String commitMsg = "bump up ${PROJECT} to ${VERSION}"
					String branchName=
					String mergeName=
                    dir(quarkusPlatformRepo){
                        sh "git checkout bump-${PROJECT}-${VERSION}"
                        // re-run update-quarkus-platform.sh with 'finalize'
                        sh "../${kogitoPipelinesRepo}/tools/update-quarkus-platform.sh ${PROJECT} ${VERSION} finalize"
						// squash commits
						sh "branchName=$(git rev-parse --abbrev-ref HEAD)"
						sh "mergeName=$(git merge-base main ${branchName})"
						sh "git reset ${mergeName}"
						sh "git add -A"
						sh "git commit -m "${commitMsg}"
						sh "git push --force-with-lease"
                    }
                }
            }
        }
        stage('clone quarkus-platform and update kogito version: finalize') {
			when {
				expression {COMMAND	== 'finalize'}
			}
            steps {
                script {
                    String prLink = null
                    String commitMsg = "bump up ${PROJECT} to ${VERSION}"
                    String localBranch = "bump-${PROJECT}-${VERSION}"
                    dir(quarkusPlatformRepo){
                        checkoutRepo(quarkusPlatformRepo, $baseBranch)
                        githubscm.setUserConfigFromCreds()
                        githubscm.createBranch(localBranch)
                        // run update-quarkus-platform.sh with 'tage' to update kogito version in quarkus-platform
                        sh "../${kogitoPipelinesRepo}/tools/update-quarkus-platform.sh ${PROJECT} ${VERSION} finalizeOnly"
                        // Add changed files, commit and open PR
                        prLink = commitAndCreatePR(commitMsg, { sh "git add --all" }, localBranch, $baseBranch)
                    }
                }
            }
        }
    }
}

String commitAndCreatePR(String commitMsg, Closure precommit, String baseBranch, String localBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"

    githubscm.commitChanges(commitMsg, precommit)
    githubscm.pushObject('origin', baseBranch)
    return githubscm.createPR(commitMsg, prBody, localBranch)
}

void checkoutRepo(String repo, String branch) {
    deleteDir()
    if { repo = "kogito-pipelines" } {
        GIT_AUTHOR=kiegroup
    } else {
        GIT_AUTHOR=quarkusio
    }
    checkout(githubscm.resolveRepository(repo, GIT_AUTHOR, branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}
